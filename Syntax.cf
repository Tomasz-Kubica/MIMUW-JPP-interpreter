-- Tomasz Kubica -- JPP language syntax
-- Based on https://www.mimuw.edu.pl/~ben/Zajecia/Mrj2020/Latte/Latte.cf
------------------------------------------------------------

-- programs ------------------------------------------------

Program.   Program ::= [Stmt] ;

separator  Stmt "" ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

VarDecl.   Stmt ::= Type Ident "=" Expr ";" ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

IfElse.    Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Functions -----------------------------------------------

FnDef.     Stmt ::= Type Ident "(" [Arg] ")" Block ;

Arg. 	     Arg ::= Type Ident;

separator  Arg "," ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;


-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;