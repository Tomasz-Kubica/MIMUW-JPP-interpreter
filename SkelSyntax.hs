-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelSyntax where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsSyntax

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsSyntax.Ident -> Result
transIdent x = case x of
  AbsSyntax.Ident string -> failure x

transProgram :: Show a => AbsSyntax.Program' a -> Result
transProgram x = case x of
  AbsSyntax.Program _ stmts -> failure x

transBlock :: Show a => AbsSyntax.Block' a -> Result
transBlock x = case x of
  AbsSyntax.Block _ stmts -> failure x

transStmt :: Show a => AbsSyntax.Stmt' a -> Result
transStmt x = case x of
  AbsSyntax.Empty _ -> failure x
  AbsSyntax.BStmt _ block -> failure x
  AbsSyntax.VarDecl _ type_ ident expr -> failure x
  AbsSyntax.ConstDecl _ type_ ident expr -> failure x
  AbsSyntax.Ass _ ident expr -> failure x
  AbsSyntax.Ret _ expr -> failure x
  AbsSyntax.Bre _ -> failure x
  AbsSyntax.Cont _ -> failure x
  AbsSyntax.If _ expr stmt -> failure x
  AbsSyntax.IfElse _ expr stmt1 stmt2 -> failure x
  AbsSyntax.While _ expr stmt -> failure x
  AbsSyntax.For _ ident expr1 expr2 stmt -> failure x
  AbsSyntax.SExp _ expr -> failure x
  AbsSyntax.Print _ expr -> failure x
  AbsSyntax.FnDef _ type_ ident args stmt -> failure x

transArgType :: Show a => AbsSyntax.ArgType' a -> Result
transArgType x = case x of
  AbsSyntax.ValArg _ type_ -> failure x
  AbsSyntax.RefArg _ type_ -> failure x

transArg :: Show a => AbsSyntax.Arg' a -> Result
transArg x = case x of
  AbsSyntax.Arg _ argtype ident -> failure x

transType :: Show a => AbsSyntax.Type' a -> Result
transType x = case x of
  AbsSyntax.Int _ -> failure x
  AbsSyntax.Str _ -> failure x
  AbsSyntax.Bool _ -> failure x
  AbsSyntax.Fun _ type_ argtypes -> failure x

transExpr :: Show a => AbsSyntax.Expr' a -> Result
transExpr x = case x of
  AbsSyntax.EVar _ ident -> failure x
  AbsSyntax.ELitInt _ integer -> failure x
  AbsSyntax.ELitTrue _ -> failure x
  AbsSyntax.ELitFalse _ -> failure x
  AbsSyntax.ECall _ ident exprs -> failure x
  AbsSyntax.EString _ string -> failure x
  AbsSyntax.Neg _ expr -> failure x
  AbsSyntax.Not _ expr -> failure x
  AbsSyntax.EMul _ expr1 mulop expr2 -> failure x
  AbsSyntax.EAdd _ expr1 addop expr2 -> failure x
  AbsSyntax.ERel _ expr1 relop expr2 -> failure x
  AbsSyntax.EAnd _ expr1 expr2 -> failure x
  AbsSyntax.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsSyntax.AddOp' a -> Result
transAddOp x = case x of
  AbsSyntax.Plus _ -> failure x
  AbsSyntax.Minus _ -> failure x

transMulOp :: Show a => AbsSyntax.MulOp' a -> Result
transMulOp x = case x of
  AbsSyntax.Times _ -> failure x
  AbsSyntax.Div _ -> failure x
  AbsSyntax.Mod _ -> failure x

transRelOp :: Show a => AbsSyntax.RelOp' a -> Result
transRelOp x = case x of
  AbsSyntax.LTH _ -> failure x
  AbsSyntax.LE _ -> failure x
  AbsSyntax.GTH _ -> failure x
  AbsSyntax.GE _ -> failure x
  AbsSyntax.EQU _ -> failure x
  AbsSyntax.NE _ -> failure x
